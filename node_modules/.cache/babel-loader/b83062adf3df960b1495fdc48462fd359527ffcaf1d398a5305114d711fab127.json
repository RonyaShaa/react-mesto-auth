{"ast":null,"code":"var _jsxFileName = \"/home/veronika/dev/react-mesto-auth/src/components/ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Link, Navigate, useNavigate } from 'react-router-dom';\n\n// • <ProtectedRoute /> - Нужен он для того чтобы “защитить” \n// основную часть сайта, а именно компонент Main \n// от попадания внутрь неавторизованных пользователей. \n// Этот компонент перекинет пользователя \n// на страницу авторизации, если его прав недостаточно \n// для просмотра Main компонента. \n// С точки зрения пользователя это будет выглядеть так, \n// что при входе на корневую страницу сайта \n// он сразу же окажется по адресу /sign-in .\n//  Если же у пользователя есть права, \n//  например флажок который вы установили при авторизации в стейте, \n//  то он останется на корневой странице сайта и увидит Main компонент.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProtectedRoute = _ref => {\n  let {\n    element: Component,\n    ...props\n  } = _ref;\n  return props.loggedIn ? /*#__PURE__*/_jsxDEV(Component, {\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 27\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"signin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 54\n  }, this);\n};\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Link","Navigate","useNavigate","jsxDEV","_jsxDEV","ProtectedRoute","_ref","element","Component","props","loggedIn","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/home/veronika/dev/react-mesto-auth/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\nimport {Link, Navigate, useNavigate} from 'react-router-dom';\n\n// • <ProtectedRoute /> - Нужен он для того чтобы “защитить” \n// основную часть сайта, а именно компонент Main \n// от попадания внутрь неавторизованных пользователей. \n// Этот компонент перекинет пользователя \n// на страницу авторизации, если его прав недостаточно \n// для просмотра Main компонента. \n// С точки зрения пользователя это будет выглядеть так, \n// что при входе на корневую страницу сайта \n// он сразу же окажется по адресу /sign-in .\n//  Если же у пользователя есть права, \n//  например флажок который вы установили при авторизации в стейте, \n//  то он останется на корневой странице сайта и увидит Main компонент.\n\n\nexport const ProtectedRoute = ({element : Component, ...props} ) => {\n  return props.loggedIn ? <Component {...props} /> : <Navigate to='signin'/>\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,IAAI,EAAEC,QAAQ,EAAEC,WAAW,QAAO,kBAAkB;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,OAAO,MAAMC,cAAc,GAAGC,IAAA,IAAsC;EAAA,IAArC;IAACC,OAAO,EAAGC,SAAS;IAAE,GAAGC;EAAK,CAAC,GAAAH,IAAA;EAC5D,OAAOG,KAAK,CAACC,QAAQ,gBAAGN,OAAA,CAACI,SAAS;IAAA,GAAKC;EAAK;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAI,gBAAGV,OAAA,CAACH,QAAQ;IAACc,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAE;AAC5E,CAAC;AAAAE,EAAA,GAFYX,cAAc;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}