{"ast":null,"code":"var _jsxFileName = \"/home/veronika/dev/react-mesto-auth/src/components/InfoTooltip.jsx\";\nimport React from 'react';\n\n// • <InfoTooltip /> - просто старый добрый попап, \n// который показывает сообщение об успешной регистрации, \n// или наоборот - о произошедшей при регистрации ошибке. \n// Управлять поведением этого попапа можно \n// через state’ы в компоненте App.js\n// Так же нужно доработать компонент <Header />. \n// Теперь в шапке в зависимости от страницы, на которой мы находимся, \n// будут так же отображаться разные \n// ссылки: “Регистрация“, “Войти“, “[email пользователя] Выйти“.\n//  Для отображения соответствующей ссылке на странице \n//  можно использовать <Route />\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfoTooltip = (isOpen, onClose, title, tooltipImage) => {\n  // return (\n  //   <div className='popup popup_type_success popup_opened'>\n  //     <div className=\"popup__container\">\n  //       <button className=\"popup__close\" type=\"button\" />\n  //       <div className='popup__img-success ' />\n  //       <p className='popup__text'>Вы успешно зарегистрировались!</p>\n  //     </div>\n  //   </div>\n  // )\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup popup_type_success popup_opened\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"popup__close\",\n        type: \"button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: tooltipImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"popup__text\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = InfoTooltip;\nexport default InfoTooltip;\nvar _c;\n$RefreshReg$(_c, \"InfoTooltip\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InfoTooltip","isOpen","onClose","title","tooltipImage","className","children","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/veronika/dev/react-mesto-auth/src/components/InfoTooltip.jsx"],"sourcesContent":["import React from 'react';\n\n\n// • <InfoTooltip /> - просто старый добрый попап, \n// который показывает сообщение об успешной регистрации, \n// или наоборот - о произошедшей при регистрации ошибке. \n// Управлять поведением этого попапа можно \n// через state’ы в компоненте App.js\n// Так же нужно доработать компонент <Header />. \n// Теперь в шапке в зависимости от страницы, на которой мы находимся, \n// будут так же отображаться разные \n// ссылки: “Регистрация“, “Войти“, “[email пользователя] Выйти“.\n//  Для отображения соответствующей ссылке на странице \n//  можно использовать <Route />\n\nconst InfoTooltip = (isOpen, onClose, title, tooltipImage) => {\n  // return (\n  //   <div className='popup popup_type_success popup_opened'>\n  //     <div className=\"popup__container\">\n  //       <button className=\"popup__close\" type=\"button\" />\n  //       <div className='popup__img-success ' />\n  //       <p className='popup__text'>Вы успешно зарегистрировались!</p>\n  //     </div>\n  //   </div>\n  // )\n  return (\n    <div className='popup popup_type_success popup_opened'>\n      <div className=\"popup__container\">\n        <button className=\"popup__close\" type=\"button\" />\n        <div className= {tooltipImage} />\n        <p className='popup__text'>{title}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default InfoTooltip;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,WAAW,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,YAAY,KAAK;EAC5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACEL,OAAA;IAAKM,SAAS,EAAC,uCAAuC;IAAAC,QAAA,eACpDP,OAAA;MAAKM,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BP,OAAA;QAAQM,SAAS,EAAC,cAAc;QAACE,IAAI,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACjDZ,OAAA;QAAKM,SAAS,EAAGD;MAAa;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACjCZ,OAAA;QAAGM,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAEH;MAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAClC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV,CAAC;AAAAC,EAAA,GAnBKZ,WAAW;AAqBjB,eAAeA,WAAW;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}