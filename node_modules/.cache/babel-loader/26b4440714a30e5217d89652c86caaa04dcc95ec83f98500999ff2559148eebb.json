{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co/';\n// • функция register - принимает почту и пароль, \n// отправляет запрос регистрации на /signup\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}email@yandex.ru`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n};\n\n// • функция login - принимает почту и пароль, \n// отправляет запрос авторизации на /signin . \n// В ответ сервер вернет jwt, который нужно \n// сохранить в localStorage\n\nexport const login = (id, password) => {\n  return fetch(`${BASE_URL}/auth/local`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id,\n      password\n    }).then(response => {\n      return response.json();\n    })\n    // .then((data) => {\n    //   if(data.user) {\n    //     localStorage.setItem('jwt', data.jwt);\n    //     return data;\n    //   } else {\n    //     return;\n    //   }\n    // })\n  });\n};\n\n// • функция checkToken - принимает jwt, \n// отправляет запрос на /users/me \n// и возвращает данные пользователя\n\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Autorization': `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).then(data => {\n    return data;\n  });\n};","map":{"version":3,"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","status","login","id","response","checkToken","token","data"],"sources":["/home/veronika/dev/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL= 'https://auth.nomoreparties.co/';\n// • функция register - принимает почту и пароль, \n// отправляет запрос регистрации на /signup\n\nexport const register = (email,password) => {\n  return fetch (`${BASE_URL}email@yandex.ru`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({email,password})\n  })\n    .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`))\n  };\n\n// • функция login - принимает почту и пароль, \n// отправляет запрос авторизации на /signin . \n// В ответ сервер вернет jwt, который нужно \n// сохранить в localStorage\n\n\nexport const login = (id, password) => {\n  return fetch (`${BASE_URL}/auth/local`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      id,\n      password,\n    })\n    .then((response) => {\n      return response.json();\n    })\n    // .then((data) => {\n    //   if(data.user) {\n    //     localStorage.setItem('jwt', data.jwt);\n    //     return data;\n    //   } else {\n    //     return;\n    //   }\n    // })\n  })\n}\n\n// • функция checkToken - принимает jwt, \n// отправляет запрос на /users/me \n// и возвращает данные пользователя\n\nexport const checkToken = (token) => {\n  return fetch (`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Autorization': `Bearer ${token}`\n    },\n  })\n  .then((response) => {\n    return response.json();\n  })\n  .then((data) => {\n    return data;\n  })\n}\n\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAE,gCAAgC;AACvD;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAACC,QAAQ,KAAK;EAC1C,OAAOC,KAAK,CAAG,GAAEJ,QAAS,iBAAgB,EAAE;IAC1CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACP,KAAK;MAACC;IAAQ,CAAC;EACvC,CAAC,CAAC,CACCO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,EAAE,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC,CAAC;AAC7E,CAAC;;AAEH;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,KAAK,GAAGA,CAACC,EAAE,EAAEf,QAAQ,KAAK;EACrC,OAAOC,KAAK,CAAG,GAAEJ,QAAS,aAAY,EAAE;IACtCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBS,EAAE;MACFf;IACF,CAAC,CAAC,CACDO,IAAI,CAAES,QAAQ,IAAK;MAClB,OAAOA,QAAQ,CAACN,IAAI,EAAE;IACxB,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;;AAEA,OAAO,MAAMO,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOjB,KAAK,CAAG,GAAEJ,QAAS,WAAU,EAAE;IACpCK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,cAAc,EAAG,UAASe,KAAM;IAClC;EACF,CAAC,CAAC,CACDX,IAAI,CAAES,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAACN,IAAI,EAAE;EACxB,CAAC,CAAC,CACDH,IAAI,CAAEY,IAAI,IAAK;IACd,OAAOA,IAAI;EACb,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}