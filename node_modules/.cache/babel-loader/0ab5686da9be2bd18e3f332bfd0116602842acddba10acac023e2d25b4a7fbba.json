{"ast":null,"code":"var _jsxFileName = \"/home/veronika/dev/react-mesto-auth/src/components/Login.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\n\n// •  <Login /> - компонент для авторизации пользователя.\n//  Из себя представляет форму где пользователь \n//  вводит данные (почту и пароль) \n//  и передает их в функцию отправки на сервер.\n//   Сама функция должна быть описана выше, на уровне app.js .\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = handleLo => {\n  _s();\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: ''\n  });\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    //проверка не пустые ли поля\n    if (!formValue.email || !formValue.password) {\n      return;\n    }\n    auth.authorize(formValue.email, formValue.password).then(data => {\n      if (data.jwt) {\n        setFormValue({\n          email: '',\n          password: ''\n        });\n        handleLogin();\n        navigate('/', {\n          replace: true\n        });\n      }\n    }).catch(err => console.log(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"login\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"login__text\",\n      children: \"\\u0412\\u0445\\u043E\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"login__form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input-email\",\n        className: \"login__input login__input_type_email\",\n        type: \"email\",\n        placeholder: \"Email\",\n        name: \"email\",\n        value: formValue.email,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input-password\",\n        className: \"login__input login__input_type_password\",\n        type: \"password\",\n        placeholder: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n        name: \"password\",\n        value: formValue.password,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"login__button\",\n        type: \"submit\",\n        children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n_s(Login, \"h8yvKenJSJgYNegzUFRHza9UILc=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","Link","useNavigate","jsxDEV","_jsxDEV","Login","handleLo","_s","formValue","setFormValue","useState","email","password","navigate","handleChange","e","name","value","target","handleSubmit","preventDefault","auth","authorize","then","data","jwt","handleLogin","replace","catch","err","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","id","type","placeholder","onChange","required","_c","$RefreshReg$"],"sources":["/home/veronika/dev/react-mesto-auth/src/components/Login.jsx"],"sourcesContent":["import React from 'react';\nimport {Link, useNavigate} from 'react-router-dom';\n\n\n// •  <Login /> - компонент для авторизации пользователя.\n//  Из себя представляет форму где пользователь \n//  вводит данные (почту и пароль) \n//  и передает их в функцию отправки на сервер.\n//   Сама функция должна быть описана выше, на уровне app.js .\n\n\nconst Login = (handleLo) => {\n\n  const [formValue, setFormValue] = useState({\n    email: '',\n    password: ''\n  })\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    const {name, value} = e.target;\n\n    setFormValue({\n      ...formValue,\n      [name]: value\n    });\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    //проверка не пустые ли поля\n    if (!formValue.email || !formValue.password){\n      return;\n    }\n\n    auth.authorize(formValue.email, formValue.password)\n      .then((data) => {\n        if (data.jwt){\n          setFormValue({email: '', password: ''});\n          handleLogin();\n          navigate('/', {replace: true});\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  return (\n      <section className='login'>\n        <p className=\"login__text\">\n          Вход\n        </p>\n        <form onSubmit={handleSubmit} className=\"login__form\">\n          <input\n            id='input-email'\n            className='login__input login__input_type_email'\n            type='email'\n            placeholder='Email'\n            name='email'\n            value={formValue.email}\n            onChange={handleChange}\n            required\n          />\n          <input\n            id='input-password'\n            className='login__input login__input_type_password'\n            type='password'\n            placeholder='Пароль'\n            name='password'\n            value={formValue.password}\n            onChange={handleChange}\n            required\n          />\n          <button className=\"login__button\" type=\"submit\">Войти</button>\n        </form>\n      </section>\n  )\n}\n\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}