{"ast":null,"code":"var _jsxFileName = \"/home/veronika/dev/react-mesto-auth/src/components/InfoTooltip.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\n\n// • <InfoTooltip /> - просто старый добрый попап, \n// который показывает сообщение об успешной регистрации, \n// или наоборот - о произошедшей при регистрации ошибке. \n// Управлять поведением этого попапа можно \n// через state’ы в компоненте App.js\n// Так же нужно доработать компонент <Header />. \n// Теперь в шапке в зависимости от страницы, на которой мы находимся, \n// будут так же отображаться разные \n// ссылки: “Регистрация“, “Войти“, “[email пользователя] Выйти“.\n//  Для отображения соответствующей ссылке на странице \n//  можно использовать <Route />\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InfoTooltip = (isOpen, onClose, title, tooltipImage) => {\n  _s();\n  React.useEffect(() => {\n    //ограничиваем навешивание обработчика: если не открыт, то не нужно навешивать\n    if (!isOpen) return;\n    // объявляем внутри useEffect функцию, чтобы она не теряла ссылку при перерисовке компонента\n    const closeByEsc = e => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n    document.addEventListener('keydown', closeByEsc);\n    //обязательно удаляем обработчик\n    return () => document.removeEventListener('keydown', closeByEsc);\n    // обязательно следим за isOpen, чтобы срабатывало только при открытии, а не всегда\n  }, [isOpen, onClose]);\n\n  //создаем обработчик оверлея\n  const handleOverlay = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `popup ${isOpen ? 'popup_opened' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup__container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"popup__close\",\n        type: \"button\",\n        onClick: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup__img\",\n        src: tooltipImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"popup__text\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(InfoTooltip, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = InfoTooltip;\nexport default InfoTooltip;\nvar _c;\n$RefreshReg$(_c, \"InfoTooltip\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InfoTooltip","isOpen","onClose","title","tooltipImage","_s","useEffect","closeByEsc","e","key","document","addEventListener","removeEventListener","handleOverlay","target","currentTarget","className","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","_c","$RefreshReg$"],"sources":["/home/veronika/dev/react-mesto-auth/src/components/InfoTooltip.jsx"],"sourcesContent":["import React from 'react';\n\n\n// • <InfoTooltip /> - просто старый добрый попап, \n// который показывает сообщение об успешной регистрации, \n// или наоборот - о произошедшей при регистрации ошибке. \n// Управлять поведением этого попапа можно \n// через state’ы в компоненте App.js\n// Так же нужно доработать компонент <Header />. \n// Теперь в шапке в зависимости от страницы, на которой мы находимся, \n// будут так же отображаться разные \n// ссылки: “Регистрация“, “Войти“, “[email пользователя] Выйти“.\n//  Для отображения соответствующей ссылке на странице \n//  можно использовать <Route />\n\nconst InfoTooltip = (isOpen, onClose, title, tooltipImage) => {\n  React.useEffect(() => {\n    //ограничиваем навешивание обработчика: если не открыт, то не нужно навешивать\n    if(!isOpen) return;\n    // объявляем внутри useEffect функцию, чтобы она не теряла ссылку при перерисовке компонента\n    const closeByEsc = (e) => {\n      if(e.key === 'Escape') {\n        onClose();\n      }\n    }\n    document.addEventListener('keydown', closeByEsc)\n    //обязательно удаляем обработчик\n    return () => document.removeEventListener('keydown', closeByEsc)\n    // обязательно следим за isOpen, чтобы срабатывало только при открытии, а не всегда\n  }, [isOpen, onClose])\n\n  //создаем обработчик оверлея\n  const handleOverlay = (e) => {\n    if(e.target === e.currentTarget) {\n      onClose();\n    }\n  }\n  return (\n    <div className={`popup ${isOpen ? 'popup_opened' : ''}`}>\n      <div className=\"popup__container\">\n        <button className=\"popup__close\" type=\"button\" onClick={onClose}/>\n        <div className='popup__img' src={tooltipImage}  />\n        <p className='popup__text'>{title}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default InfoTooltip;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,WAAW,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,YAAY,KAAK;EAAAC,EAAA;EAC5DR,KAAK,CAACS,SAAS,CAAC,MAAM;IACpB;IACA,IAAG,CAACL,MAAM,EAAE;IACZ;IACA,MAAMM,UAAU,GAAIC,CAAC,IAAK;MACxB,IAAGA,CAAC,CAACC,GAAG,KAAK,QAAQ,EAAE;QACrBP,OAAO,EAAE;MACX;IACF,CAAC;IACDQ,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEJ,UAAU,CAAC;IAChD;IACA,OAAO,MAAMG,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEL,UAAU,CAAC;IAChE;EACF,CAAC,EAAE,CAACN,MAAM,EAAEC,OAAO,CAAC,CAAC;;EAErB;EACA,MAAMW,aAAa,GAAIL,CAAC,IAAK;IAC3B,IAAGA,CAAC,CAACM,MAAM,KAAKN,CAAC,CAACO,aAAa,EAAE;MAC/Bb,OAAO,EAAE;IACX;EACF,CAAC;EACD,oBACEH,OAAA;IAAKiB,SAAS,EAAG,SAAQf,MAAM,GAAG,cAAc,GAAG,EAAG,EAAE;IAAAgB,QAAA,eACtDlB,OAAA;MAAKiB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BlB,OAAA;QAAQiB,SAAS,EAAC,cAAc;QAACE,IAAI,EAAC,QAAQ;QAACC,OAAO,EAAEjB;MAAQ;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAE,eAClExB,OAAA;QAAKiB,SAAS,EAAC,YAAY;QAACQ,GAAG,EAAEpB;MAAa;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAClDxB,OAAA;QAAGiB,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAEd;MAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAClC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV,CAAC;AAAAlB,EAAA,CA/BKL,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AAiCjB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}