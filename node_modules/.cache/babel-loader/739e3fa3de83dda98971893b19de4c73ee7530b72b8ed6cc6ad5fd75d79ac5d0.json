{"ast":null,"code":"//экземпляр апи\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-62\",\n  headers: {\n    'content-type': 'application/json',\n    authorization: '42690f73-759c-4798-9db6-9b61cef90de2'\n  }\n});\nclass Api {\n  constructor(config) {\n    this._checkResponse = res => {\n      if (res.ok) {\n        //возвращаем ответ сервера\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    };\n    this._baseUrl = config.baseUrl;\n    this._headers = config.headers;\n  }\n  //загрузка информации о пользователе с сервера\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  //загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  //редактирование данных профиля\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  //добавление новой карточки\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  //удаление карточки\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  //поставить лайк\n  putLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  //удалить лайк\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  //обновление аватара пользователя\n  editAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.link\n      })\n    }).then(this._checkResponse);\n  }\n}","map":{"version":3,"names":["api","Api","baseUrl","headers","authorization","constructor","config","_checkResponse","res","ok","json","Promise","reject","status","_baseUrl","_headers","getUserInfo","fetch","method","then","getInitialCards","editUserInfo","data","body","JSON","stringify","name","about","addNewCard","link","deleteCard","cardId","putLike","deleteLike","editAvatar","avatar"],"sources":["/home/veronika/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["//экземпляр апи\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-62\",\n  headers: {\n    'content-type': 'application/json',\n    authorization: '42690f73-759c-4798-9db6-9b61cef90de2',\n  }\n});\n\n\nclass Api {\n  constructor(config){\n    this._baseUrl = config.baseUrl;\n    this._headers = config.headers;\n    \n  }\n\n  _checkResponse = (res) => {\n    if(res.ok) {\n      //возвращаем ответ сервера\n      return res.json(); \n    }\n    return Promise.reject(`Ошибка: ${res.status}`)\n  };\n\n  //загрузка информации о пользователе с сервера\n   getUserInfo(){\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: this._headers,\n    })\n    .then(this._checkResponse);\n   }\n\n  //загрузка карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: this._headers,\n    })\n    .then(this._checkResponse);\n  }\n\n  //редактирование данных профиля\n  editUserInfo(data){\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body:  JSON.stringify({\n        name: data.name,\n        about: data.about\n      }),\n    })\n    .then(this._checkResponse);\n  }\n\n  //добавление новой карточки\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body:  JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  //удаление карточки\n  deleteCard(cardId){\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(this._checkResponse);\n  }\n\n  //поставить лайк\n  putLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers,\n    })\n    .then(this._checkResponse);\n  }\n  //удалить лайк\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(this._checkResponse);\n  }\n  //обновление аватара пользователя\n  editAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body:  JSON.stringify({\n        avatar: data.link,\n      })\n    })\n    .then(this._checkResponse);\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}